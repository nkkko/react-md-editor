{"version":3,"file":"static/js/643.a509dcb4.chunk.js","mappings":"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","sources":["../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n"],"names":["emptyOptions","one","value","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","decodeNumericCharacterReference","base","code","Number","parseInt","String","fromCharCode","characterEscapeOrReference","decode","$0","$1","$2","charCodeAt","head","hex","slice","decodeNamedCharacterReference","stringifyPosition","position","point","line","column","pos","start","end","own","hasOwnProperty","fromMarkdown","encoding","options","undefined","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","events","tree","context","stack","tokenStack","resume","setData","getData","listStack","push","prepareList","pop","handler","call","Object","assign","sliceSerialize","tail","defaultOnError","offset","lineIndex","firstBlankLineIndex","atMarker","containerBalance","listSpread","event","tailIndex","tailEvent","_spread","splice","key","create","and","open","token","this","errorHandler","close","onExitError","Error","settings","toString","lang","meta","replace","identifier","normalizeIdentifier","toLowerCase","title","url","depth","text","includes","referenceType","string","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","parse","document","write","preprocess","d","combined","extensions","extension","right","left","classifyCharacter","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","attention","name","tokenize","effects","ok","attentionMarkers","parser","constructs","null","previous","before","marker","inside","consume","after","_open","_close","resolveAll","group","openingSequence","closingSequence","use","nextEvents","movePoint","insideSpan","_bufferIndex","nok","size","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","next","blankLine","markdownSpace","factorySpace","markdownLineEnding","partial","self","state","containerState","_container","continuation","contBefore","disable","attempt","asciiPunctuation","max","test","numeric","asciiHexDigit","asciiDigit","nonLazyContinuation","lineStart","lazy","now","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","sequenceOpen","beforeSequenceOpen","infoBefore","interrupt","check","atNonLazyBreak","contentType","info","metaBefore","contentBefore","contentStart","beforeContentChunk","contentChunk","concrete","afterPrefix","atBreak","furtherStart","between","resolve","tailExitIndex","headEnterIndex","content","chunkInside","contentEnd","continuationConstruct","contentContinue","subtokenize","prefixed","flow","factoryLabel","labelAfter","markerAfter","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace","headingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","initialSize","kind","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","_closeFlow","furtherBlankLines","notInCurrentItem","indentConstruct","setextUnderline","sequence","literalType","literalMarkerType","rawType","stringType","limit","POSITIVE_INFINITY","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","markerType","seen","labelInside","labelEscape","prefix","begin","escape","regexCheck","regex","remove","items","parameters","chunkStart","from","unshift","combineExtensions","syntaxExtension","hook","existing","add","toUpperCase","called","jumps","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","stream","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem"],"sourceRoot":""}